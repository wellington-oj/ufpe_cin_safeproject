/* The following code was generated by JFlex 1.4 on 06/10/11 18:33 */

package scanner;

import beaver.Symbol;
import beaver.Scanner;
import parser.JavaParser.Terminals;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 06/10/11 18:33 from the specification file
 * <tt>/home/uoji/JastAddJ/Java1.4Backend/scanner/JavaScanner.flex</tt>
 */
public final class JavaScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\14\7\1\103\1\7\4\0"+
    "\1\3\1\72\1\21\1\0\1\6\1\102\1\76\1\20\1\57\1\60"+
    "\1\5\1\100\1\66\1\17\1\15\1\4\1\10\3\23\4\14\2\13"+
    "\1\75\1\65\1\71\1\67\1\70\1\74\1\0\3\12\1\56\1\16"+
    "\1\55\5\6\1\54\13\6\1\11\2\6\1\63\1\22\1\64\1\101"+
    "\1\6\1\0\1\24\1\31\1\32\1\43\1\26\1\44\1\46\1\40"+
    "\1\41\1\6\1\36\1\34\1\47\1\35\1\33\1\50\1\6\1\27"+
    "\1\25\1\30\1\42\1\51\1\52\1\45\1\37\1\53\1\61\1\77"+
    "\1\62\1\73\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0"+
    "\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0"+
    "\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0"+
    "\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0"+
    "\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0"+
    "\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7"+
    "\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6"+
    "\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0"+
    "\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6"+
    "\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6"+
    "\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7"+
    "\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7"+
    "\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0"+
    "\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0"+
    "\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0"+
    "\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6"+
    "\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6"+
    "\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6"+
    "\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0"+
    "\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\1\1\11\20\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\40\1\41\1\1\1\2\1\0\1\42"+
    "\1\43\1\6\2\0\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\51\1\0\2\52\1\0\31\5\1\53\2\5"+
    "\1\54\12\5\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\2\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\0\1\105\1\6\1\44\1\0\1\106"+
    "\12\73\15\5\1\107\15\5\1\110\2\5\1\111\4\5"+
    "\1\112\12\5\1\113\1\114\1\115\1\74\1\0\1\116"+
    "\1\0\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\2\5\1\127\6\5\1\130\3\5\1\131\1\5"+
    "\1\132\2\5\1\133\1\134\4\5\1\135\1\136\1\5"+
    "\1\137\10\5\1\140\5\5\1\141\1\5\1\142\5\5"+
    "\1\143\1\144\4\5\1\145\1\146\1\5\1\147\1\5"+
    "\1\150\7\5\1\151\1\152\5\5\1\153\1\154\1\5"+
    "\1\155\2\5\1\156\1\5\1\157\1\5\1\160\2\5"+
    "\1\161\2\5\1\162\2\5\1\163\4\5\1\164\4\5"+
    "\1\165\1\5\1\166\4\5\1\167\1\170\1\171\1\5"+
    "\1\172\1\5\1\173\1\174\2\5\1\175\4\5\1\176"+
    "\1\5\1\177\1\5\1\200\1\5\1\201\1\5\1\202"+
    "\1\203\1\5\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\210\0\314\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\210\0\u0330\0\u0374"+
    "\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\210\0\210"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\210\0\210\0\210\0\u0880\0\u08c4\0\u0908"+
    "\0\u094c\0\u0990\0\210\0\u09d4\0\210\0\u0a18\0\210\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\210\0\210\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\210\0\210\0\210\0\210\0\210\0\u0c7c\0\210"+
    "\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u0198\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\210\0\210\0\u1760\0\210\0\u17a4\0\210\0\210"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\210\0\210"+
    "\0\u17e8\0\u182c\0\210\0\210\0\210\0\210\0\210\0\210"+
    "\0\210\0\210\0\u1870\0\210\0\u18b4\0\u18f8\0\u193c\0\210"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u0198"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u0198\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u0198\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\210\0\u2794\0\210\0\210\0\u19c4\0\210\0\u27d8\0\210"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\210\0\u281c"+
    "\0\u2860\0\u0198\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u0198\0\u2a3c\0\u2a80\0\u2ac4\0\u0198\0\u2b08\0\u0198\0\u2b4c"+
    "\0\u2b90\0\u0198\0\u0198\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u0198"+
    "\0\u0198\0\u2ce4\0\u0198\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u0198\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\u0198\0\u309c\0\210\0\u30e0\0\u3124\0\u3168\0\u31ac"+
    "\0\u31f0\0\u0198\0\u0198\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u0198\0\u3388\0\u0198\0\u33cc\0\u0198\0\u3410\0\u3454\0\u3498"+
    "\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u0198\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u0198\0\u0198\0\u3784\0\u0198\0\u37c8"+
    "\0\u380c\0\u0198\0\u3850\0\u0198\0\u3894\0\u0198\0\u38d8\0\u391c"+
    "\0\u0198\0\u3960\0\u39a4\0\u0198\0\u39e8\0\u3a2c\0\u0198\0\u3a70"+
    "\0\u3ab4\0\u3af8\0\u3b3c\0\u0198\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c"+
    "\0\u0198\0\u3c90\0\u0198\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u0198"+
    "\0\u0198\0\u0198\0\u3de4\0\u0198\0\u3e28\0\u0198\0\u0198\0\u3e6c"+
    "\0\u3eb0\0\u0198\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u0198\0\u4004"+
    "\0\u0198\0\u4048\0\u0198\0\u408c\0\u0198\0\u40d0\0\u0198\0\u0198"+
    "\0\u4114\0\u0198";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\3"+
    "\1\11\2\10\2\12\1\13\1\10\1\14\1\15\1\16"+
    "\1\3\1\12\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\10\1\26\1\27\3\10\1\30\1\10\1\31"+
    "\1\32\1\10\1\33\1\10\1\34\1\35\1\36\4\10"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\16\64\1\67\1\70\61\64\105\0\1\4\106\0\1\71"+
    "\1\72\61\0\1\73\103\0\1\74\22\0\7\10\1\0"+
    "\1\10\4\0\34\10\24\0\1\10\10\0\1\75\1\76"+
    "\1\0\1\77\1\75\1\100\1\101\4\0\1\75\2\0"+
    "\1\101\5\0\1\102\6\0\1\103\1\104\1\76\6\0"+
    "\1\102\1\104\1\103\35\0\1\12\2\0\2\12\1\100"+
    "\1\101\4\0\1\12\2\0\1\101\5\0\1\102\6\0"+
    "\1\103\1\104\7\0\1\102\1\104\1\103\35\0\1\100"+
    "\2\0\2\100\6\0\1\100\77\0\1\105\47\0\1\106"+
    "\14\0\1\107\1\110\1\111\15\107\1\0\1\107\1\112"+
    "\61\107\6\0\7\10\1\0\1\10\4\0\2\10\1\113"+
    "\3\10\1\114\25\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\1\10\1\115\3\10\1\116\6\10\1\117"+
    "\1\120\1\10\1\121\7\10\1\122\4\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\11\10\1\123\10\10"+
    "\1\124\11\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\125\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\126\10\10\1\127\16\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\4\10"+
    "\1\130\3\10\1\131\3\10\1\132\17\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\133\6\10"+
    "\1\134\1\135\3\10\1\136\16\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\10\10\1\137\23\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\1\10\1\140"+
    "\1\10\1\141\13\10\1\142\14\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\12\10\1\143\6\10\1\144"+
    "\2\10\1\145\7\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\146\4\10\1\147\23\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\1\10\1\150"+
    "\6\10\1\151\1\152\4\10\1\153\15\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\10\10\1\154\23\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\155\2\10\1\156\12\10\1\157\14\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\10\10\1\160\23\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\15\10"+
    "\1\161\16\10\24\0\1\10\67\0\1\162\103\0\1\163"+
    "\1\164\102\0\1\165\1\0\1\166\101\0\1\167\103\0"+
    "\1\170\6\0\1\171\74\0\1\172\7\0\1\173\73\0"+
    "\1\174\10\0\1\175\72\0\1\176\103\0\1\177\14\0"+
    "\1\64\2\0\16\64\2\0\61\64\1\0\1\65\102\0"+
    "\1\200\1\0\6\200\1\201\3\200\1\202\3\200\1\203"+
    "\1\204\1\205\1\201\3\200\1\206\1\207\1\210\3\200"+
    "\1\211\6\200\1\212\37\200\1\71\1\4\1\5\101\71"+
    "\5\72\1\213\76\72\10\0\1\75\2\0\1\77\1\75"+
    "\1\100\1\101\4\0\1\75\2\0\1\101\5\0\1\214"+
    "\6\0\1\103\1\104\7\0\1\214\1\104\1\103\35\0"+
    "\1\215\1\0\3\215\1\0\1\215\4\0\2\215\1\0"+
    "\1\215\2\0\2\215\10\0\2\215\10\0\2\215\35\0"+
    "\1\77\2\0\2\77\1\100\1\101\4\0\1\77\2\0"+
    "\1\101\14\0\1\103\1\104\10\0\1\104\1\103\35\0"+
    "\1\100\2\0\2\100\1\0\1\101\4\0\1\100\2\0"+
    "\1\101\14\0\1\103\1\104\10\0\1\104\1\103\35\0"+
    "\1\216\2\0\2\216\2\0\1\217\3\0\1\216\54\0"+
    "\1\217\23\0\1\220\64\0\1\110\102\0\1\200\1\0"+
    "\6\200\1\221\3\200\1\222\3\200\1\223\1\224\1\225"+
    "\1\221\3\200\1\226\1\227\1\230\3\200\1\231\6\200"+
    "\1\232\37\200\6\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\233\31\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\2\10\1\234\31\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\21\10\1\235\12\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\236\2\10"+
    "\1\237\27\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\12\10\1\240\21\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\10\10\1\241\23\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\25\10\1\242\6\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\243\15\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\2\10\1\244\31\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\245\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\246\26\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\247\12\10\1\250\2\10\1\251\14\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\252\11\10"+
    "\1\253\15\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\254\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\10\10\1\255\23\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\256\26\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\257\2\10\1\260\26\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\261\21\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\262\32\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\263\32\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\12\10\1\264\21\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\265\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\27\10\1\266\4\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\267\22\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\2\10\1\270\2\10\1\271\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\25\10\1\272\6\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\21\10"+
    "\1\273\12\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\17\10\1\274\14\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\11\10\1\275\22\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\276\27\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\277\23\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\12\10\1\300\21\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\301\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\7\10\1\302\24\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\303\5\10\1\304\15\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\6\10\1\305\25\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\11\10\1\306\4\10"+
    "\1\307\15\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\16\10\1\310\15\10\24\0\1\10\67\0\1\311"+
    "\1\312\102\0\1\313\24\0\1\202\3\0\1\202\6\0"+
    "\1\202\70\0\1\314\3\0\1\314\6\0\1\314\60\0"+
    "\4\72\1\4\1\213\76\72\10\0\1\215\1\0\3\215"+
    "\1\0\1\215\4\0\2\215\1\0\1\215\2\0\2\215"+
    "\1\0\1\214\6\0\2\215\7\0\1\214\2\215\35\0"+
    "\1\216\2\0\2\216\6\0\1\216\17\0\1\103\1\104"+
    "\10\0\1\104\1\103\35\0\1\216\2\0\2\216\6\0"+
    "\1\216\70\0\1\315\3\0\1\315\3\0\1\316\2\0"+
    "\1\315\70\0\1\317\3\0\1\317\3\0\1\316\2\0"+
    "\1\317\100\0\1\320\103\0\1\321\103\0\1\322\103\0"+
    "\1\323\103\0\1\324\103\0\1\325\103\0\1\326\103\0"+
    "\1\327\71\0\7\10\1\0\1\10\4\0\3\10\1\330"+
    "\30\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\5\10\1\331\26\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\332\30\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\5\10\1\333\26\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\16\10\1\334"+
    "\15\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\7\10\1\335\24\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\4\10\1\336\27\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\337\30\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\5\10\1\340"+
    "\26\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\341\30\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\342\30\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\17\10\1\343\14\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\12\10\1\344"+
    "\21\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\345\30\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\10\10\1\346\23\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\2\10\1\347\31\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\1\10\1\350"+
    "\32\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\11\10\1\351\22\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\3\10\1\352\30\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\3\10\1\353\30\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\7\10\1\354"+
    "\24\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\2\10\1\355\2\10\1\356\26\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\2\10\1\357\31\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\4\10\1\360"+
    "\27\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\23\10\1\361\10\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\16\10\1\362\15\10\24\0\1\10\6\0"+
    "\7\10\1\0\1\10\4\0\11\10\1\363\22\10\24\0"+
    "\1\10\6\0\7\10\1\0\1\10\4\0\5\10\1\364"+
    "\26\10\24\0\1\10\6\0\7\10\1\0\1\10\4\0"+
    "\3\10\1\365\30\10\24\0\1\10\6\0\7\10\1\0"+
    "\1\10\4\0\10\10\1\366\1\367\22\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\370\32\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\6\10"+
    "\1\371\25\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\2\10\1\251\31\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\1\10\1\372\32\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\373\32\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\374\23\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\13\10\1\375\20\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\376\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\26\10\1\377\5\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\u0100\22\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\1\10\1\u0101\32\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\20\10\1\u0102\13\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\11\10\1\u0103\22\10"+
    "\24\0\1\10\67\0\1\u0104\34\0\1\316\71\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\u0105\27\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\u0106\27\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u0107\15\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\u0108\24\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\15\10\1\u0109\16\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\u010a\26\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\4\10"+
    "\1\u010b\27\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\u010c\24\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\u010d\21\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\u010e\27\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\u010f\31\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\27\10\1\u0110\4\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\13\10\1\u0111\20\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\3\10\1\u0112\30\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\15\10"+
    "\1\u0113\16\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\374\26\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\16\10\1\u0114\15\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\2\10\1\u0115\31\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\26\10"+
    "\1\u0116\5\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\1\10\1\u0117\32\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\4\10\1\u0118\27\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\u0119\27\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u011a\30\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\17\10\1\u011b\14\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\11\10\1\u011c\22\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\u011d\26\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\u011e\22\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\1\10\1\u011f\32\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u0120\30\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\1\10\1\u0121\32\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\16\10"+
    "\1\u0122\15\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\u0123\26\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u0124\30\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\u0125\26\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\u0126\32\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\7\10\1\u0127\24\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u0128\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\4\10\1\u0129\27\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\15\10"+
    "\1\u012a\16\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\20\10\1\u012b\13\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\u012c\21\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\16\10\1\u012d\15\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\2\10"+
    "\1\u012e\31\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\1\10\1\u012f\32\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\u0130\21\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\3\10\1\u0131\30\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\12\10"+
    "\1\u0132\21\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\21\10\1\u0133\12\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u0134\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\24\10\1\u0135\7\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\11\10"+
    "\1\u0136\22\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\u0137\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\11\10\1\u0138\22\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\23\10\1\u0139\10\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\7\10"+
    "\1\u013a\24\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\u013b\26\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\7\10\1\u013c\24\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\16\10\1\u013d\15\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\7\10"+
    "\1\u013e\24\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\21\10\1\u013f\12\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\10\10\1\u0140\23\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\2\10\1\u0141\31\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u0142\30\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\12\10\1\u0143\21\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\17\10\1\u0144\14\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\7\10\1\u0145\24\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\1\10"+
    "\1\u0146\32\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\u0147\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u0148\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\14\10\1\u0149\17\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u014a\30\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\5\10\1\u014b\26\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\3\10\1\u014c\30\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\11\10\1\u014d\22\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\5\10"+
    "\1\u014e\26\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\25\10\1\u014f\6\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\12\10\1\u0150\21\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\12\10\1\u0151\21\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u0152\30\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\u0153\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\7\10\1\u0154\24\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\12\10\1\u0155\21\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\3\10"+
    "\1\u0156\30\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\u0157\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\16\10\1\u0158\15\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\5\10\1\u0159\26\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\10\10"+
    "\1\u015a\23\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\3\10\1\u015b\30\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\5\10\1\u015c\26\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\20\10\1\u015d\13\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\30\10"+
    "\1\u015e\3\10\24\0\1\10\6\0\7\10\1\0\1\10"+
    "\4\0\21\10\1\u015f\12\10\24\0\1\10\6\0\7\10"+
    "\1\0\1\10\4\0\2\10\1\u0160\31\10\24\0\1\10"+
    "\6\0\7\10\1\0\1\10\4\0\3\10\1\u0161\30\10"+
    "\24\0\1\10\6\0\7\10\1\0\1\10\4\0\20\10"+
    "\1\u0162\13\10\24\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16728];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\11\1\1\11\20\1\10\11\4\1\3\11"+
    "\5\1\1\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\2\11\1\1\2\0\1\1\1\0\5\11\1\0\1\11"+
    "\1\1\1\0\47\1\2\11\1\1\1\11\1\1\12\11"+
    "\2\1\10\11\1\0\1\11\2\1\1\0\1\11\70\1"+
    "\1\11\1\1\2\11\1\0\1\11\1\0\10\11\54\1"+
    "\1\11\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1784) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return sym(Terminals.LTEQ);
          }
        case 133: break;
        case 38: 
          { return sym(Terminals.DOUBLE_LITERAL, str().substring(0,len()-1));
          }
        case 134: break;
        case 73: 
          { return sym(Terminals.INT);
          }
        case 135: break;
        case 69: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0, len()-1));
          }
        case 136: break;
        case 42: 
          { error("unterminated character literal at end of line");
          }
        case 137: break;
        case 97: 
          { return sym(Terminals.VOID);
          }
        case 138: break;
        case 75: 
          { return sym(Terminals.RSHIFTEQ);
          }
        case 139: break;
        case 25: 
          { return sym(Terminals.AND);
          }
        case 140: break;
        case 117: 
          { return sym(Terminals.EXTENDS);
          }
        case 141: break;
        case 112: 
          { return sym(Terminals.THROWS);
          }
        case 142: break;
        case 81: 
          { return sym(Terminals.CHARACTER_LITERAL, "\\");
          }
        case 143: break;
        case 51: 
          { return sym(Terminals.ANDEQ);
          }
        case 144: break;
        case 58: 
          { return sym(Terminals.MODEQ);
          }
        case 145: break;
        case 116: 
          { return sym(Terminals.PUBLIC);
          }
        case 146: break;
        case 4: 
          { return sym(Terminals.MULT);
          }
        case 147: break;
        case 54: 
          { return sym(Terminals.OROR);
          }
        case 148: break;
        case 87: //TODO MODIFICADO
          { return sym(Terminals.TRY);
          }
        case 149: break;
        case 108: 
          { return sym(Terminals.ASSERT);
          }
        case 150: break;
        case 78: 
          { int val = Integer.parseInt(str().substring(2,len()-1),8);
			                             return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
          }
        case 151: break;
        case 21: 
          { return sym(Terminals.NOT);
          }
        case 152: break;
        case 37: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0,len()-1));
          }
        case 153: break;
        case 101: 
          { return sym(Terminals.THROW);
          }
        case 154: break;
        case 19: 
          { return sym(Terminals.GT);
          }
        case 155: break;
        case 32: 
          { error("unterminated string at end of line");
          }
        case 156: break;
        case 88: 
          { return sym(Terminals.ELSE);
          }
        case 157: break;
        case 18: 
          { return sym(Terminals.EQ);
          }
        case 158: break;
        case 65: 
          { strbuf.append( '\t' );
          }
        case 159: break;
        case 84: 
          { return sym(Terminals.CHARACTER_LITERAL, "\b");
          }
        case 160: break;
        case 31: 
          { strbuf.append(str());
          }
        case 161: break;
        case 11: 
          { return sym(Terminals.RPAREN);
          }
        case 162: break;
        case 44: 
          { return sym(Terminals.DO);
          }
        case 163: break;
        case 118: 
          { return sym(Terminals.BOOLEAN);
          }
        case 164: break;
        case 46: 
          { return sym(Terminals.GTEQ);
          }
        case 165: break;
        case 104: 
          { return sym(Terminals.CLASS);
          }
        case 166: break;
        case 95: 
          { return sym(Terminals.NULL_LITERAL);
          }
        case 167: break;
        case 96: 
          { return sym(Terminals.EOF);
          }
        case 168: break;
        case 34: 
          { return sym(Terminals.DIVEQ);
          }
        case 169: break;
        case 35: 
          { return sym(Terminals.MULTEQ);
          }
        case 170: break;
        case 122: 
          { return sym(Terminals.PRIVATE);
          }
        case 171: break;
        case 91: 
          { return sym(Terminals.BYTE);
          }
        case 172: break;
        case 20: 
          { return sym(Terminals.LT);
          }
        case 173: break;
        case 98: 
          { return sym(Terminals.URSHIFTEQ);
          }
        case 174: break;
        case 28: 
          { return sym(Terminals.XOR);
          }
        case 175: break;
        case 120: 
          { return sym(Terminals.FINALLY);
          }
        case 176: break;
        case 124: 
          { return sym(Terminals.STRICTFP);
          }
        case 177: break;
        case 86: 
          { return sym(Terminals.CHARACTER_LITERAL, "\f");
          }
        case 178: break;
        case 9: 
          { yybegin(STRING); 
  				   // remember start position of string literal so we can
				   // set its position correctly in the end
  				   strlit_start_line = yyline+1;
				   strlit_start_column = yycolumn+1;
  				   strbuf.setLength(0);
          }
        case 179: break;
        case 89: 
          { return sym(Terminals.BOOLEAN_LITERAL);
          }
        case 180: break;
        case 102: 
          { return sym(Terminals.BREAK);
          }
        case 181: break;
        case 67: 
          { strbuf.append( '\n' );
          }
        case 182: break;
        case 130: 
          { return sym(Terminals.INSTANCEOF);
          }
        case 183: break;
        case 47: 
          { return sym(Terminals.RSHIFT);
          }
        case 184: break;
        case 113: 
          { return sym(Terminals.NATIVE);
          }
        case 185: break;
        case 76: 
          { return sym(Terminals.URSHIFT);
          }
        case 186: break;
        case 60: 
          { strbuf.append((char)Integer.parseInt(str().substring(1),8));
          }
        case 187: break;
        case 56: 
          { return sym(Terminals.PLUSPLUS);
          }
        case 188: break;
        case 119: 
          { return sym(Terminals.DEFAULT);
          }
        case 189: break;
        case 115: 
          { return sym(Terminals.DOUBLE);
          }
        case 190: break;
        case 126: 
          { return sym(Terminals.VOLATILE);
          }
        case 191: break;
        case 57: 
          { return sym(Terminals.XOREQ);
          }
        case 192: break;
        case 26: 
          { return sym(Terminals.OR);
          }
        case 193: break;
        case 121: 
          { return sym(Terminals.PACKAGE);
          }
        case 194: break;
        case 110: 
          { return sym(Terminals.SWITCH);
          }
        case 195: break;
        case 10: 
          { return sym(Terminals.LPAREN);
          }
        case 196: break;
        case 49: 
          { return sym(Terminals.LSHIFT);
          }
        case 197: break;
        case 36: 
          { return sym(Terminals.DOUBLE_LITERAL);
          }
        case 198: break;
        case 45: 
          { return sym(Terminals.EQEQ);
          }
        case 199: break;
        case 41: 
          { return sym(Terminals.MINUSEQ);
          }
        case 200: break;
        case 125: 
          { return sym(Terminals.CONTINUE);
          }
        case 201: break;
        case 123: 
          { return sym(Terminals.ABSTRACT);
          }
        case 202: break;
        case 94: 
          { return sym(Terminals.LONG);
          }
        case 203: break;
        case 27: 
          { return sym(Terminals.PLUS);
          }
        case 204: break;
        case 85: 
          { return sym(Terminals.CHARACTER_LITERAL, "\n");
          }
        case 205: break;
        case 80: 
          { return sym(Terminals.CHARACTER_LITERAL, "\"");
          }
        case 206: break;
        case 16: 
          { return sym(Terminals.SEMICOLON);
          }
        case 207: break;
        case 15: 
          { return sym(Terminals.RBRACK);
          }
        case 208: break;
        case 106: 
          { return sym(Terminals.FINAL);
          }
        case 209: break;
        case 59: 
          { error("illegal escape sequence \""+str()+"\"");
          }
        case 210: break;
        case 114: 
          { return sym(Terminals.IMPORT);
          }
        case 211: break;
        case 90: 
          { return sym(Terminals.THIS);
          }
        case 212: break;
        case 64: 
          { strbuf.append( '\r' );
          }
        case 213: break;
        case 105: 
          { return sym(Terminals.FLOAT);
          }
        case 214: break;
        case 100: 
          { return sym(Terminals.SUPER);
          }
        case 215: break;
        case 8: 
          { return sym(Terminals.MINUS);
          }
        case 216: break;
        case 66: 
          { strbuf.append( '\b' );
          }
        case 217: break;
        case 6: 
          { return sym(Terminals.INTEGER_LITERAL);
          }
        case 218: break;
        case 1: 
          { error("illegal character \""+str()+ "\"");
          }
        case 219: break;
        case 82: 
          { return sym(Terminals.CHARACTER_LITERAL, "\r");
          }
        case 220: break;
        case 43: 
          { return sym(Terminals.IF);
          }
        case 221: break;
        case 40: 
          { return sym(Terminals.MINUSMINUS);
          }
        case 222: break;
        case 129: 
          { return sym(Terminals.PROTECTED);
          }
        case 223: break;
        case 62: 
          { strbuf.append( '\"' );
          }
        case 224: break;
        case 79: 
          { return sym(Terminals.CHARACTER_LITERAL, "\'");
          }
        case 225: break;
        case 83: 
          { return sym(Terminals.CHARACTER_LITERAL, "\t");
          }
        case 226: break;
        case 24: 
          { return sym(Terminals.COLON);
          }
        case 227: break;
        case 74: 
          { return sym(Terminals.FOR);
          }
        case 228: break;
        case 61: 
          { strbuf.append( '\'' );
          }
        case 229: break;
        case 93: 
          { return sym(Terminals.CHAR);
          }
        case 230: break;
        case 63: 
          { strbuf.append( '\\' );
          }
        case 231: break;
        case 13: 
          { return sym(Terminals.RBRACE);
          }
        case 232: break;
        case 72: 
          { return sym(Terminals.NEW);
          }
        case 233: break;
        case 70: 
          { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
          }
        case 234: break;
        case 14: 
          { return sym(Terminals.LBRACK);
          }
        case 235: break;
        case 22: 
          { return sym(Terminals.COMP);
          }
        case 236: break;
        case 3: 
          { return sym(Terminals.DIV);
          }
        case 237: break;
        case 128: 
          { return sym(Terminals.INTERFACE);
          }
        case 238: break;
        case 23: 
          { return sym(Terminals.QUESTION);
          }
        case 239: break;
        case 127: 
          { return sym(Terminals.TRANSIENT);
          }
        case 240: break;
        case 52: 
          { return sym(Terminals.ANDAND);
          }
        case 241: break;
        case 50: 
          { return sym(Terminals.NOTEQ);
          }
        case 242: break;
        case 29: 
          { return sym(Terminals.MOD);
          }
        case 243: break;
        case 107: 
          { return sym(Terminals.WHILE);
          }
        case 244: break;
        case 77: 
          { return sym(Terminals.LSHIFTEQ);
          }
        case 245: break;
        case 30: 
          { if(sub_line == 0 && sub_column == 0) {
                                     sub_line = yyline; sub_column = yycolumn;
                                   }
          }
        case 246: break;
        case 55: 
          { return sym(Terminals.PLUSEQ);
          }
        case 247: break;
        case 68: 
          { strbuf.append( '\f' );
          }
        case 248: break;
        case 103: 
          { return sym(Terminals.CATCH);
          }
        case 249: break;
        case 17: 
          { return sym(Terminals.COMMA);
          }
        case 250: break;
        case 132: 
          { return sym(Terminals.SYNCHRONIZED);
          }
        case 251: break;
        case 53: 
          { return sym(Terminals.OREQ);
          }
        case 252: break;
        case 111: 
          { return sym(Terminals.RETURN);
          }
        case 253: break;
        case 71: 
          { return sym(Terminals.TRY);
          }
        case 254: break;
        case 5: 
          { return sym(Terminals.IDENTIFIER);
          }
        case 255: break;
        case 92: 
          { return sym(Terminals.CASE);
          }
        case 256: break;
        case 12: 
          { return sym(Terminals.LBRACE);
          }
        case 257: break;
        case 33: 
          { yybegin(YYINITIAL); 
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
          }
        case 258: break;
        case 131: 
          { return sym(Terminals.IMPLEMENTS);
          }
        case 259: break;
        case 109: 
          { return sym(Terminals.STATIC);
          }
        case 260: break;
        case 39: 
          { return sym(Terminals.FLOATING_POINT_LITERAL, str().substring(0,len()-1));
          }
        case 261: break;
        case 7: 
          { return sym(Terminals.DOT);
          }
        case 262: break;
        case 99: 
          { return sym(Terminals.SHORT);
          }
        case 263: break;
        case 2: 
          { 
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { // detect position of first SUB character
                                   if(!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
                                     // reset to only return error once
                                     sub_line = 0;
                                     sub_column = 0;
                                     // return error
                                     error("error");
                                   }
                                   return sym(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
